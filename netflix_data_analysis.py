# -*- coding: utf-8 -*-
"""Netflix_data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U34VDBfiL9CFqijZNGUrmoQBOfutrOXt

# **Netflix Data Analysis Project :**

**Project Overview**

This project explores Netflix’s dataset using Google Colab to analyze content trends, genre distributions, and platform evolution. The goal is to extract insights about how Netflix has expanded its content library over the years and identify key patterns in its movie and TV show offerings.

* Loading and inspecting the dataset (df.head(), df.info(), df.shape())
* Checking for missing (df.isna().sum()) and duplicate values (df.duplicated().sum())
* Renaming columns (date_added → Date, listed_in → category)
* Converting the Date column to datetime format
* Visualizing the distribution of movies vs. TV shows using a pie chart
* Analyzing the most frequent directors

**Step 1: Import Libraries**

 import the necessary Python libraries:
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Step 2: Load the Dataset**

Read the Netflix dataset from a CSV file:
"""

df = pd.read_csv('/netflix1 (1).csv')

"""Check the first few rows of the dataset:"""

df.head()

"""**Step 3: Check Dataset Shape**

Check the number of rows and columns:
"""

df.shape

"""**Step 4: Display Last Few Rows**

Check the last five rows:
"""

df.head()

df.tail()

"""**Step 5: Get Dataset Information**

Check column names, data types, and missing values:

"""

df.info()

"""**Step 6: Check for Missing Values**

Identify missing values:
"""

df.isna().sum()

"""**Step 7: Check for Duplicates**

Find duplicated rows:
"""

df.duplicated().sum()

"""**Step 8: Display Column Names**

Print column names:
"""

df.columns

"""**Step 9: Rename Columns**

Rename date_added to Date and listed_in to category:
"""

df.rename(columns={'date_added':'Date',"listed_in":"category"},inplace=True)

"""**Step 10: Convert Date Column to Datetime Format**

Convert the Date column from string to datetime format:
"""

df['Date'] = pd.to_datetime(df['Date'])

df.info()

"""**Step 11: Generate Statistical Summary**

Get descriptive statistics:
"""

df.describe()

"""**Step 12: Count of Movies vs. TV Shows**

Count the number of Movies and TV Shows:
"""

showtype = df['type'].value_counts().reset_index()

showtype

"""**Step 13: Visualizing Movie vs. TV Show Distribution**

Plot a pie chart:
"""

plt.figure(figsize=(20,6))
plt.pie(showtype['count'],labels=['Movie','TVshow'],autopct='%1.3f%%',explode=[0,0.1])
plt.show()

df.head()

"""**Step 14: Most Frequent Directors**

Find the top 10 directors with the most content:
"""

directors = df['director'].value_counts()
directors.head(10)

given_directors = directors.sum() - directors[0]
print(f'given directors = {given_directors}')

import plotly.graph_objects as go

# Assuming you have values for directors[0] and given_directors

fig = go.Figure(data=[go.Pie(labels=['Given Directors', 'Not Given Directors'],
                             values=[directors[0], given_directors],
                             title='Given Directors Vs Not Given Directors',
                             marker=dict(colors=['black', 'darkred']))])

fig.show()

directors = df.groupby(['director', 'type'])['director'].value_counts().reset_index().head(15)
directors

"""**Step 15: Plot the Data**

Now, use Matplotlib to visualize the top 10 genres:
"""

plt.figure(figsize=(20,6))
plt.bar(directors['director'],directors['count'],color='red')
plt.xticks(rotation=90)
plt.show()

country = df['country'].value_counts().reset_index().sort_values(by='count',ascending = False).head(60)
country

plt.figure(figsize=(20,6))
plt.plot(country['country'],country['count'],color='red')
plt.xticks(rotation=90)
plt.show()

country = df['country'].value_counts().reset_index().sort_values(by='count',ascending = False).head(10)
country

plt.figure(figsize=(20,8))
plt.title('Top 10 countries')
sns.barplot(x='country',y='count',data=country)
plt.xlabel('Country')
plt.ylabel('No of Movies')

top10_country=country.sort_values(by='count',ascending=False).head(10)
top10_country

sns.barplot(data=top10_country,x='country',y='count',hue=df['type'],alpha=0.8,width=0.6)
plt.ylabel('Count')
plt.xlabel('Contries')
plt.title('Top 10 Countries')
plt.xticks(rotation=90)
plt.show()

df['release_year'].plot(kind='hist', bins=30)
plt.title('Distribution of Release Years')
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.show()

ratings = df.groupby(['rating', 'type'])['type'].value_counts().reset_index()
ratings

top_10_movie_ratings = ratings[ratings['type'] == 'Movie'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_movie_ratings

top_10_movie_ratings.plot(x='rating', y='count', kind='bar')
plt.title('Top 10 Movie Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

top_10_TV_Show_ratings = ratings[ratings['type'] == 'TV Show'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_TV_Show_ratings

top_10_TV_Show_ratings.plot(x='rating', y='count', kind='bar')
plt.title('Top 10 TV Shows Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

durations = df.groupby(['duration', 'type'])['duration'].value_counts().reset_index()
durations

top_10_movie_durations = durations[durations['type'] == 'Movie'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_movie_durations

top_10_movie_durations.plot(x='duration', y='count', kind='bar')
plt.title('Top 10 Movie Durations')
plt.xlabel('Duration')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

top_10_TV_Show_durations = durations[durations['type'] == 'TV Show'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_TV_Show_durations

top_10_TV_Show_durations.plot(x='duration', y='count', kind='bar')
plt.title('Top 10 TV Shows Durations')
plt.xlabel('Duration')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

category = df.groupby(['category', 'type'])['category'].value_counts().reset_index()
category

top_10_listed_in_movie = category[category['type'] == 'Movie'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_listed_in_movie

top_10_listed_in_movie.plot(x='category', y='count', kind='bar')
plt.title('Top 10 Listed Genres for Movies')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

top_10_listed_in_TV_Show = category[category['type'] == 'TV Show'].sort_values(by='count', ascending=False).iloc[0:10]
top_10_listed_in_TV_Show

""" top 10 most listed genres for TV shows"""

top_10_listed_in_TV_Show.plot(x='category', y='count', kind='bar')
plt.title('Top 10 Listed Genres for TV Shows')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

"""*********************************"""